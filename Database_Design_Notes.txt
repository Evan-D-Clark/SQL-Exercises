Understand the requirements
Build a conceptual model
	The things and concepts the database will work with
	Typical technologies: Entity Relationship and UML
		draw.io is a good platform for this
Build a logical model
	Specify type of each attribute
	Specify relationship between entities
Build a physical model
	Implement logical model with specific technology
	Add primary/foreign keys to each table
	Forign key references the primary key of another table
		(update foreign key on update [almost always cascade] 
			and on delete [case by case])
	Composite primary key uses two keys to be uniquely identified
	Check for redundancy (normalization)
1NF
	Each cell should have a single value and we cannot have repeated columns
2NF
	Every table should describe one entity, and every column in that table
		should describe that entity.
3NF
	A column in a table shouldn't be derived from others in that table.
Focus on removing repitition and keep requirements in mind. Don't solve problems that don't
	exist (don't fear ghosts)

Indexing
	Data structures for DBs. Like a directory.
	They increase database size and slow down writes. Don't make them unless you really need
		them for particular queries
	Order composite indexes with most frequently used column first or highest to lowest
		cardinality. Or don't, it depends on the queries that the index serves
	Things like ORs and mathmatical expressions can mess up the use of indexes. Isolating
		columns and breaking up an OR into a UNION can help
	Indexes can be used to make ORDER BYs faster. Try to avoid ORDER BYs though.
	In a composite index on a and b, you can filter by a, ab, aDESCbDESC, but anything else
		won't properly utilize the index
	Secondary indexes automatically include the primary key. If a search uses a column that
		isn't covered by the index, it won't be used.
	If you make index ab, don't make a. Look at existing indexes before making new ones

Security
	Specify web server for end users to connect from with IP address